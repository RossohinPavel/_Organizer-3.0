from ...source import *
from ....mytyping import Categories, Type
from .assist import AssistWindow


class LibraryWindow(ChildWindow):
    """–û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π"""
    width = 550
    height = 400
    win_title = '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞'

    def __init__(self) -> None:
        super().__init__()
        self.container = ScrolledFrame(self, bootstyle='round')
        self.container.pack(fill=ttkc.BOTH, expand=1)
        self.draw_main_widgets()
       
    def draw_main_widgets(self) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        for i, val in enumerate(AppManager.lib.get_headers().items()):
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            category, products = val
            h = HeaderFrame(self, category)
            h.pack(fill=ttkc.X, padx=(1, 10), pady=(0 if i == 0 else 5, 2))
            h.draw_bound_widgets(products)

    def redraw(self) -> None:
        """–ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤ –≤ —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
        for widget in self.container.winfo_children():
            widget.destroy()
        self.draw_main_widgets()
 

class HeaderFrame(ttk.Frame):
    """
        –§—Ä–µ–π–º - –∑–∞–≥–æ–ª–æ–≤–æ–∫. –ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª HeaderLabel. 
        –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.
    """

    def __init__(self, master: LibraryWindow, category: Type[Categories]) -> None:
        super().__init__(master.container)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ LibraryWindow –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞
        self.lib_win = master
        self.category = category

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º—ã—Ö
        self.draw_main_widgets()
    
    def draw_main_widgets(self) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        btn = ttk.Button(
            self,
            style='Lib+.success.Outline.TButton', 
            text='+', 
            command=self.add_command
        )
        btn.pack(side=ttkc.LEFT)

        # –õ–µ–π–±–ª —Å —Ç–µ–∫—Å—Ç–æ–º
        lbl = ttk.Label(self, text=self.category.__doc__)       # type: ignore
        lbl.pack(anchor=ttkc.W, padx=(0, 0), side=ttkc.LEFT)
    
    def draw_bound_widgets(self, products: list[tuple[int, str]]) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º –∏–∑ products"""
        end = len(products) - 1
        for j, product in enumerate(products):
            p = ProductFrame(
                self.lib_win, 
                j == end, 
                self.category, 
                *product
            )
            p.pack(fill=ttkc.X, padx=(0, 10))
    
    def add_command(self, base=None) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É."""
        if base:
            name = f'–ö–æ–ø–∏—è {base.name}'
            values = base[1:]
        else:
            name = f'–ù–æ–≤—ã–π {self.category.__name__}'
            prop_obj = AppManager.lib.properties(self.category.__name__)
            values = (prop_obj(x)[0] for x in self.category._fields[1:])
        try: 
            AppManager.lib.add(self.category(name, *values)) #type: ignore
            self.lib_win.redraw()
        except Exception as e: 
            tkmb.showwarning('–û—à–∏–±–∫–∞', str(e), parent=self.lib_win)


class ProductFrame(ttk.Frame):
    """–§—Ä–µ–π–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º."""
    
    def __init__(
        self, 
        master: LibraryWindow, 
        end: bool,                  # –ú–∞—Ä–∫–µ—Ä –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–æ–ª–æ–≤–∏–Ω—ã –≤–∏–¥–∂–µ—Ç–∞ Separator
        category: Type[Categories],
        id: int, 
        name: str
        ) -> None:
        super().__init__(master.container, padding=(8, 0, 0, 0))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        self.lib_win = master
        self.category = category
        self.id = id

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
        self.draw_separators(end)
        ttk.Label(self, text=name).pack(side=ttkc.LEFT, padx=20, pady=3)
        self.draw_buttons()
    
    def draw_separators(self, end: bool) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π"""
        ttk.Separator(self, orient='vertical').place(x=3, relheight=0.5 if end else 1)
        ttk.Separator(self, orient='horizontal').place(x=3, relwidth=0.98, rely=0.5)
    
    def draw_buttons(self) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–±—ä–µ–∫—Ç–æ–º"""
        delete = ttk.Button(
            self,
            style='Libdelete.danger.Outline.TButton',
            text='üóë', 
            command=self.delete_command
        )
        delete.pack(side=ttkc.RIGHT, padx=(0, 3))
        edit = ttk.Button(
            self, 
            style='Libedit.warning.Outline.TButton',
            text='üñä', 
            command=lambda: AssistWindow(self.lhl, 'change', self.lhl.category, self.id)
        )
        edit.pack(side=ttkc.RIGHT, padx=(0, 3))
        copy = ttk.Button(
            self, 
            style='Libcopy.success.Outline.TButton',
            text='üìë', 
            command=lambda: self.lhl.add_command(AppManager.lib.from_id(self.lhl.category, self.id))
        )
        copy.pack(side=ttkc.RIGHT, padx=(0, 3))
    
    def delete_command(self) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
        AppManager.lib.delete(self.category, self.id)
        self.lib_win.redraw()
