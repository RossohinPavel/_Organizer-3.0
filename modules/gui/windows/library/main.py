from ...source import *
from ....mytyping import Iterator, Type, Categories
# from .assist import AssistWindow


class LibraryWindow(ChildWindow):
    """–û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π"""
    width = 550
    height = 400
    win_title = '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞'

    def __init__(self) -> None:
        super().__init__()
        self.container = ScrolledFrame(self, bootstyle='round')
        self.container.pack(fill=ttkc.BOTH, expand=1)
        self.draw_main_widgets()
       
    def draw_main_widgets(self) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        for i, val in enumerate(AppManager.lib.get_headers().items()):
            category, products = val

            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            lhl = LibHeaderLabel(self, category)
            lhl.pack(
                fill=ttkc.X, 
                padx=(0, 10),
                pady=(0 if i == 0 else 5, 2)
            )

            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            for j, product in enumerate(products):
                p = ProductInterface(
                    self, 
                    j == len(product) - 1, 
                    category, 
                    *product
                )
                p.pack(fill=ttkc.X, padx=(0, 10))
 

class LibHeaderLabel(ttk.Frame):
    """
        –§—Ä–µ–π–º - –∑–∞–≥–æ–ª–æ–≤–æ–∫. –ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª HeaderLabel. 
        –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.
    """

    def __init__(self, master: LibraryWindow, product: Categories):
        self.lib_win = master
        self.product = product
        super().__init__(master.container)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        btn = ttk.Button(self, text='+', style='Lib+.success.Outline.TButton')
        btn.pack(side=ttkc.LEFT)

        # –õ–µ–π–±–ª —Å —Ç–µ–∫—Å—Ç–æ–º
        lbl = ttk.Label(self, text=product.__doc__)     # type: ignore
        lbl.pack(anchor=ttkc.W, padx=(0, 0), side=ttkc.LEFT)


class ProductInterface(ttk.Frame):
    """–§—Ä–µ–π–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º."""
    
    def __init__(self, master: LibraryWindow, end: bool, category: Categories, id: int, name: str):
        self.lib_win = master
        self.category = category
        self.id = id
        self.name = name
        super().__init__(master.container, padding=(8, 0, 0, 0))
        self.draw_separators(end)
        lbl = ttk.Label(self, text=name, )
        lbl.pack(side=ttkc.LEFT, padx=20, pady=3)
        self.draw_buttons()
    
    def draw_separators(self, end: bool) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π"""
        ttk.Separator(self, orient='vertical').place(relheight=0.5 if end else 1)
        ttk.Separator(self, orient='horizontal').place(relwidth=0.98, rely=0.5)
    
    def draw_buttons(self) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–±—ä–µ–∫—Ç–æ–º"""
        delete = ttk.Button(self, text='üóë', style='Libdelete.danger.Outline.TButton')
        delete.pack(side=ttkc.RIGHT, padx=(0, 3))
        edit = ttk.Button(self, text='üñä', style='Libedit.warning.Outline.TButton')
        edit.pack(side=ttkc.RIGHT, padx=(0, 3))
        copy = ttk.Button(self, text='üìë', style='Libcopy.success.Outline.TButton')
        copy.pack(side=ttkc.RIGHT, padx=(0, 3))






# class LibMenubutton(ttk.Menubutton):
#     """Menubutton –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ"""
#     def __init__(self, colapsing_int: Any, text:str):
#         self._interface = colapsing_int
#         self._pname = text
#         super().__init__(
#             master=colapsing_int._lib_frame, 
#             text=text, 
#             style='ms.info.Outline.TMenubutton', 
#             cursor='hand2'
#             )
#         self.show_menu()
    
#     def delete_products(self):
#         """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
#         AppManager.lib.delete(self._interface._category.__name__, self._pname)
#         self._interface.update_widgets()
    
#     def show_info_box(self) -> None:
#         product = AppManager.lib.get(self._pname)
#         text = '\n'.join(f'{field} -- {getattr(product, field)}' for field in product._fields if field != 'full_name')
#         tkmb.showinfo(parent=self.master.master.master, title=product.full_name, message=text)  #type: ignore

#     def show_menu(self) -> None:
#         """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ–Ω—é"""
#         menu = ttk.Menu(self)

#         menu.add_command(
#             label='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 
#             command=self.show_info_box
#             )
#         menu.add_command(
#             label='–ò–∑–º–µ–Ω–∏—Ç—å', 
#             command=lambda: AssistWindow(
#                 self._interface._lib_frame.master.master, # type: ignore
#                 mode='change',
#                 category=self._interface._category,
#                 product=self._pname,
#                 update_func=self._interface.update_widgets
#                 )
#             )
#         menu.add_command(
#             label='–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
#             command=lambda: AssistWindow(
#                 self._interface._lib_frame.master.master, # type: ignore
#                 mode='copy',
#                 category=self._interface._category,
#                 product=self._pname,
#                 update_func=self._interface.update_widgets
#                 )
#             )
#         menu.add_command(label='–£–¥–∞–ª–∏—Ç—å', command=self.delete_products)
#         self['menu'] = menu


# class CollapsingInterface:
#     """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π –¥–æ—á–µ—Ä–Ω–∏—Ö –≤–∏–¥–∂–µ—Ç–æ–≤"""
#     __slots__ = '_row', '_lib_frame', '_category', '_container', '_state', '_btn1'

#     def __init__(self, row: int, lib_frame: ScrolledFrame, category: Type[AppManager.lib.Product]) -> None:
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
#         self._row = row
#         self._lib_frame = lib_frame
#         self._category = category

#         # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –° –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–µ–π —Å–≤–µ—Ä—Ç—ã–≤–∞–Ω—è / —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
#         self._btn1 = ttk.Button(
#             self._lib_frame,
#             text='‚åÑ  ' + self._category.__doc__, #type: ignore
#             style='library.TButton', 
#             command=self._toggle_open_close
#             )
#         self._btn1.grid(row=self._row, column=0, sticky='ew')

#         # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
#         ttk.Button(
#             self._lib_frame, 
#             text='+' , 
#             style='LibraryPlus.TButton',
#             cursor='hand2',
#             command=self.add_product
#             ).grid(
#                 row=self._row, 
#                 column=1, 
#                 sticky='nsew', 
#                 padx=(0, 12)
#                 )
        
#         # –ü–æ–ª–æ–∂–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏. False - –∑–∞–∫—Ä—ã—Ç, True - –æ—Ç–∫—Ä—ã—Ç
#         self._state = True

#         # –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤
#         self._container = ()
#         self._update_container()
    
#     def add_product(self):
#         """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É"""
#         AssistWindow(
#             master=self._lib_frame.master.master, # type: ignore
#             mode='add',
#             category=self._category,
#             update_func=self.update_widgets
#             )

#     def _update_container(self) -> None:
#         """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
#         def _func() -> Iterator[LibMenubutton]:
#             """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫"""
#             for i, product in enumerate(sorted(AppManager.lib.headers[self._category]), 1):
#                 btn = LibMenubutton(self, text=product)
#                 btn.grid(
#                     row=self._row + i, 
#                     column=0, 
#                     columnspan=2, 
#                     sticky='ew',
#                     padx=(5, 17),
#                     pady=(0 if i != 1 else 5, 5)
#                 )
                
#                 yield btn
        
#         # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Ñ—Ä–µ–π–º
#         self._container = tuple(_func())
#         self._toggle_open_close()
 
#     def _toggle_open_close(self):
#         """–û—Ç–∫—Ä—ã—Ç–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–∂–µ—Ç–∞"""
#         if self._state:
#             for btn in self._container: btn.grid_remove()
#             self._btn1.configure(text='‚åÑ  ' + self._category.__doc__) #type: ignore
#         else:
#             for btn in self._container: btn.grid()
#             self._btn1.configure(text='‚åÉ  ' + self._category.__doc__) #type: ignore
#         self._state = not self._state

#     def update_widgets(self):
#         """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"""
#         # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
#         for widget in self._container: widget.destroy()

#         # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
#         current_state = self._state

#         # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
#         self._state = True

#         # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∏–¥–∂–µ—Ç–æ–≤
#         self._update_container()

#         # –ï—Å–ª–∏ –≤–∏–¥–∂–µ—Ç –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞, —Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ —Å–Ω–æ–≤–∞
#         if current_state: self._toggle_open_close()
